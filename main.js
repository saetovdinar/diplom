(()=>{"use strict";var e,t,n,r,o,a,i,c={668:(e,t,n)=>{n(588);class r{constructor(e){this.apiUrl=e}async getChat(){const e=await fetch(this.apiUrl+"/upload/chat");return await e.json()}async add(e){const t=await fetch(this.apiUrl+"/chat",{method:"POST",body:e});return await t.json()}async getWeather(){const e=await fetch(this.apiUrl+"/weather");return await e.json()}}const o=document.querySelector(".chat_cont");new class{constructor(e){this.container=e,this.submitBtn=document.querySelector(".submit"),this.text=document.querySelector(".input"),this.chat=document.querySelector(".chat"),this.fileLoadBtn=document.querySelector(".overlap"),this.fileLoad=document.querySelector(".file_load"),this.eventRegister(),this.api=new r("http://localhost:7070"),this.renderChatStorage(),this.lazyLoad(),this.DragNDrop()}DragNDrop(){this.container.addEventListener("dragover",(e=>{e.preventDefault()})),this.container.addEventListener("drop",(e=>{e.preventDefault();const t=e.dataTransfer.files&&e.dataTransfer.files[0],n=URL.createObjectURL(t);let r;-1!=t.type.indexOf("image")&&(r=document.createElement("img"),r.src=n),-1!=t.type.indexOf("video")&&(r=document.createElement("video"),r.src=n,r.controls=!0),-1!=t.type.indexOf("audio")&&(r=document.createElement("audio"),r.src=n,r.controls=!0);const o=document.createElement("div");o.classList.add("post_cont"),o.append(r),this.chat.append(o)}))}lazyLoad(){this.chat.addEventListener("scroll",(()=>{0===this.chat.scrollTop&&this.api.getChat().then((e=>{e.forEach((e=>{if(-1!=e.message.indexOf("http")&&-1!=e.message.indexOf("blob")){let t;"image"===e.type&&(t=document.createElement("img"),t.src=e.message),"video"===e.type&&(t=document.createElement("video"),t.src=e.message,t.controls=!0),"audio"===e.type&&(t=document.createElement("audio"),t.src=e.message,t.controls=!0);const n=document.createElement("div");return n.classList.add("post_cont"),n.append(t),void this.chat.prepend(n)}if(-1!=e.message.indexOf("http")){const t=document.createElement("a");t.href=e.message,t.append(e.message);const n=document.createElement("div");return n.classList.add("post_cont"),n.append(t),void this.chat.prepend(n)}const t=document.createElement("div");t.classList.add("post_cont"),t.append(e.message),this.chat.prepend(t)}))}))}))}renderChatStorage(){this.api.getChat().then((e=>{e.forEach((e=>{if(-1!=e.message.indexOf("http")&&-1!=e.message.indexOf("blob")){let t;"image"===e.type&&(t=document.createElement("img"),t.src=e.message),"video"===e.type&&(t=document.createElement("video"),t.src=e.message,t.controls=!0),"audio"===e.type&&(t=document.createElement("audio"),t.src=e.message,t.controls=!0);const n=document.createElement("div");return n.classList.add("post_cont"),n.append(t),void this.chat.prepend(n)}if(-1!=e.message.indexOf("http")){const t=document.createElement("a");t.href=e.message,t.append(e.message);const n=document.createElement("div");return n.classList.add("post_cont"),n.append(t),void this.chat.prepend(n)}const t=document.createElement("div");t.classList.add("post_cont"),t.append(e.message),this.chat.prepend(t)})),this.chat.scrollTop+=this.chat.scrollHeight}))}eventRegister(){this.videoPost(),this.audioPost(),this.textPost(),this.loadFile()}loadFile(){this.fileLoad.addEventListener("change",(e=>{const t=this.fileLoad.files&&this.fileLoad.files[0];if(!t)return;const n=new FormData,r=URL.createObjectURL(t);let o;-1!=t.type.indexOf("image")&&(o=document.createElement("img"),n.append("message",r),n.append("type","image")),-1!=t.type.indexOf("video")&&(o=document.createElement("video"),o.controls=!0,n.append("message",r),n.append("type","video")),-1!=t.type.indexOf("audio")&&(o=document.createElement("audio"),o.controls=!0,n.append("message",r),n.append("type","audio")),o.src=r,this.api.add(n);const a=document.createElement("div");a.classList.add("post_cont");const i=document.createElement("div");i.classList.add("download_btn"),i.innerHTML="&#129095",i.addEventListener("click",(e=>{const n=document.createElement("a");n.href=r,n.rel="noopener",n.download=t.name,n.click()})),a.append(o),a.append(i),this.chat.append(a)}))}videoPost(){const e=document.querySelector(".video_record"),t=document.querySelector(".video_stop");e.addEventListener("click",(async n=>{n.preventDefault(),e.style.display="none",t.style.display="block";const r=await navigator.mediaDevices.getUserMedia({video:!0}),o=document.createElement("video");o.classList.add("video");const a=document.createElement("div");a.classList.add("post_cont"),a.append(o);const i=document.createElement("div");i.classList.add("download_btn"),i.innerHTML="&#129095",i.addEventListener("click",(e=>{const t=new Blob(d),n=document.createElement("a");n.href=URL.createObjectURL(t),n.rel="noopener",n.download="video.mp4",n.click()})),a.append(i),o.setAttribute("controls","controls"),this.chat.append(a),this.chat.scrollTop+=a.offsetHeight,this.currentPost=a;const c=new MediaRecorder(r),d=[];c.addEventListener("dataavailable",(e=>{d.push(e.data)})),c.addEventListener("stop",(()=>{const e=new Blob(d);o.src=URL.createObjectURL(e)})),c.start(),t.addEventListener("click",(async n=>{n.preventDefault(),e.style.display="block",t.style.display="none",c.stop(),r.getTracks().forEach((e=>e.stop()))}))}))}audioPost(){const e=document.querySelector(".audio_record"),t=document.querySelector(".audio_stop");e.addEventListener("click",(async n=>{n.preventDefault(),e.style.display="none",t.style.display="block";const r=await navigator.mediaDevices.getUserMedia({audio:!0}),o=document.createElement("audio"),a=document.createElement("div");a.classList.add("post_cont"),o.classList.add("audio"),a.append(o);const i=document.createElement("div");i.classList.add("download_btn"),i.innerHTML="&#129095",i.addEventListener("click",(e=>{const t=new Blob(d),n=document.createElement("a");n.href=URL.createObjectURL(t),n.rel="noopener",n.download="audio.mp3",n.click()})),a.append(i),o.setAttribute("controls","controls"),this.chat.append(a),this.chat.scrollTop+=a.offsetHeight,this.currentPost=a;const c=new MediaRecorder(r),d=[];c.addEventListener("dataavailable",(e=>{d.push(e.data)})),c.addEventListener("stop",(()=>{const e=new Blob(d),t=URL.createObjectURL(e);o.src=t})),c.start(),t.addEventListener("click",(async n=>{n.preventDefault(),e.style.display="block",t.style.display="none",c.stop(),r.getTracks().forEach((e=>e.stop()))}))}))}textPost(){this.submitBtn.addEventListener("click",(async e=>{e.preventDefault();const t=this.text.value;if(-1!=t.indexOf("@weather"))return void this.api.getWeather().then((e=>{const t=document.createElement("div");t.classList.add("post_cont");const n=Math.floor(5*Math.random());t.append(e[n]),this.chat.append(t),this.chat.scrollTop+=t.offsetHeight,this.currentPost=t,this.text.value=""}));if(-1!=t.indexOf("@schedule")){const o=t.split(" ");let[a,i,c,...d]=o;const s=Date.now(),l=Date.parse(i+"T"+c),u=d.join(" ");function p(){new Notification(u)}return setTimeout(p,l-s),void(this.text.value="")}const n=new FormData;n.append("message",t),n.append("type","text"),this.api.add(n);const r=document.createElement("div");r.classList.add("post_cont"),r.append(t),this.chat.append(r),this.chat.scrollTop+=r.offsetHeight,this.currentPost=r,this.text.value=""}))}}(o)},140:(e,t,n)=>{var r=n(918),o=Object.create(null),a="undefined"==typeof document,i=Array.prototype.forEach;function c(){}function d(e,t){if(!t){if(!e.href)return;t=e.href.split("?")[0]}if(l(t)&&!1!==e.isLoaded&&t&&t.indexOf(".css")>-1){e.visited=!0;var n=e.cloneNode();n.isLoaded=!1,n.addEventListener("load",(function(){n.isLoaded||(n.isLoaded=!0,e.parentNode.removeChild(e))})),n.addEventListener("error",(function(){n.isLoaded||(n.isLoaded=!0,e.parentNode.removeChild(e))})),n.href="".concat(t,"?").concat(Date.now()),e.nextSibling?e.parentNode.insertBefore(n,e.nextSibling):e.parentNode.appendChild(n)}}function s(){var e=document.querySelectorAll("link");i.call(e,(function(e){!0!==e.visited&&d(e)}))}function l(e){return!!/^https?:/i.test(e)}e.exports=function(e,t){if(a)return console.log("no window.document found, will not HMR CSS"),c;var n,u,p=function(e){var t=o[e];if(!t){if(document.currentScript)t=document.currentScript.src;else{var n=document.getElementsByTagName("script"),a=n[n.length-1];a&&(t=a.src)}o[e]=t}return function(e){if(!t)return null;var n=t.split(/([^\\/]+)\.js$/),o=n&&n[1];return o&&e?e.split(",").map((function(e){var n=new RegExp("".concat(o,"\\.js$"),"g");return r(t.replace(n,"".concat(e.replace(/{fileName}/g,o),".css")))})):[t.replace(".js",".css")]}}(e);return n=function(){var e=p(t.filename),n=function(e){if(!e)return!1;var t=document.querySelectorAll("link"),n=!1;return i.call(t,(function(t){if(t.href){var o=function(e,t){var n;return e=r(e,{stripWWW:!1}),t.some((function(r){e.indexOf(t)>-1&&(n=r)})),n}(t.href,e);l(o)&&!0!==t.visited&&o&&(d(t,o),n=!0)}})),n}(e);if(t.locals)return console.log("[HMR] Detected local css modules. Reload all css"),void s();n?console.log("[HMR] css reload %s",e.join(" ")):(console.log("[HMR] Reload all css"),s())},u=0,function(){var e=this,t=arguments;clearTimeout(u),u=setTimeout((function(){return n.apply(e,t)}),50)}}},918:e=>{e.exports=function(e){if(e=e.trim(),/^data:/i.test(e))return e;var t=-1!==e.indexOf("//")?e.split("//")[0]+"//":"",n=e.replace(new RegExp(t,"i"),"").split("/"),r=n[0].toLowerCase().replace(/\.$/,"");return n[0]="",t+r+n.reduce((function(e,t){switch(t){case"..":e.pop();break;case".":break;default:e.push(t)}return e}),[]).join("/")}},588:(e,t,n)=>{var r=n(140)(e.id,{locals:!1});e.hot.dispose(r),e.hot.accept(void 0,r)}},d={};function s(e){var t=d[e];if(void 0!==t){if(void 0!==t.error)throw t.error;return t.exports}var n=d[e]={id:e,exports:{}};try{var r={id:e,module:n,factory:c[e],require:s};s.i.forEach((function(e){e(r)})),n=r.module,r.factory.call(n.exports,n,n.exports,r.require)}catch(e){throw n.error=e,e}return n.exports}s.m=c,s.c=d,s.i=[],s.hu=e=>e+"."+s.h()+".hot-update.js",s.miniCssF=e=>"main.css",s.hmrF=()=>"main."+s.h()+".hot-update.json",s.h=()=>"7410b0d879fb9cb40887",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="ajs:",s.l=(n,r,o,a)=>{if(e[n])e[n].push(r);else{var i,c;if(void 0!==o)for(var d=document.getElementsByTagName("script"),l=0;l<d.length;l++){var u=d[l];if(u.getAttribute("src")==n||u.getAttribute("data-webpack")==t+o){i=u;break}}i||(c=!0,(i=document.createElement("script")).charset="utf-8",i.timeout=120,s.nc&&i.setAttribute("nonce",s.nc),i.setAttribute("data-webpack",t+o),i.src=n),e[n]=[r];var p=(t,r)=>{i.onerror=i.onload=null,clearTimeout(h);var o=e[n];if(delete e[n],i.parentNode&&i.parentNode.removeChild(i),o&&o.forEach((e=>e(r))),t)return t(r)},h=setTimeout(p.bind(null,void 0,{type:"timeout",target:i}),12e4);i.onerror=p.bind(null,i.onerror),i.onload=p.bind(null,i.onload),c&&document.head.appendChild(i)}},(()=>{var e,t,n,r={},o=s.c,a=[],i=[],c="idle",d=0,l=[];function u(e){c=e;for(var t=[],n=0;n<i.length;n++)t[n]=i[n].call(null,e);return Promise.all(t).then((function(){}))}function p(){0==--d&&u("ready").then((function(){if(0===d){var e=l;l=[];for(var t=0;t<e.length;t++)e[t]()}}))}function h(e){if("idle"!==c)throw new Error("check() is only allowed in idle status");return u("check").then(s.hmrM).then((function(n){return n?u("prepare").then((function(){var r=[];return t=[],Promise.all(Object.keys(s.hmrC).reduce((function(e,o){return s.hmrC[o](n.c,n.r,n.m,e,t,r),e}),[])).then((function(){return t=function(){return e?m(e):u("ready").then((function(){return r}))},0===d?t():new Promise((function(e){l.push((function(){e(t())}))}));var t}))})):u(v()?"ready":"idle").then((function(){return null}))}))}function f(e){return"ready"!==c?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+c+")")})):m(e)}function m(e){e=e||{},v();var r=t.map((function(t){return t(e)}));t=void 0;var o=r.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return u("abort").then((function(){throw o[0]}));var a=u("dispose");r.forEach((function(e){e.dispose&&e.dispose()}));var i,c=u("apply"),d=function(e){i||(i=e)},s=[];return r.forEach((function(e){if(e.apply){var t=e.apply(d);if(t)for(var n=0;n<t.length;n++)s.push(t[n])}})),Promise.all([a,c]).then((function(){return i?u("fail").then((function(){throw i})):n?m(e).then((function(e){return s.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e})):u("idle").then((function(){return s}))}))}function v(){if(n)return t||(t=[]),Object.keys(s.hmrI).forEach((function(e){n.forEach((function(n){s.hmrI[e](n,t)}))})),n=void 0,!0}s.hmrD=r,s.i.push((function(l){var m,v,y,g,E=l.module,b=function(t,n){var r=o[n];if(!r)return t;var i=function(i){if(r.hot.active){if(o[i]){var c=o[i].parents;-1===c.indexOf(n)&&c.push(n)}else a=[n],e=i;-1===r.children.indexOf(i)&&r.children.push(i)}else console.warn("[HMR] unexpected require("+i+") from disposed module "+n),a=[];return t(i)},s=function(e){return{configurable:!0,enumerable:!0,get:function(){return t[e]},set:function(n){t[e]=n}}};for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&"e"!==l&&Object.defineProperty(i,l,s(l));return i.e=function(e,n){return function(e){switch(c){case"ready":u("prepare");case"prepare":return d++,e.then(p,p),e;default:return e}}(t.e(e,n))},i}(l.require,l.id);E.hot=(m=l.id,v=E,g={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:y=e!==m,_requireSelf:function(){a=v.parents.slice(),e=y?void 0:m,s(m)},active:!0,accept:function(e,t,n){if(void 0===e)g._selfAccepted=!0;else if("function"==typeof e)g._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)g._acceptedDependencies[e[r]]=t||function(){},g._acceptedErrorHandlers[e[r]]=n;else g._acceptedDependencies[e]=t||function(){},g._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)g._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)g._declinedDependencies[e[t]]=!0;else g._declinedDependencies[e]=!0},dispose:function(e){g._disposeHandlers.push(e)},addDisposeHandler:function(e){g._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=g._disposeHandlers.indexOf(e);t>=0&&g._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,c){case"idle":t=[],Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](m,t)})),u("ready");break;case"ready":Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](m,t)}));break;case"prepare":case"check":case"dispose":case"apply":(n=n||[]).push(m)}},check:h,apply:f,status:function(e){if(!e)return c;i.push(e)},addStatusHandler:function(e){i.push(e)},removeStatusHandler:function(e){var t=i.indexOf(e);t>=0&&i.splice(t,1)},data:r[m]},e=void 0,g),E.parents=a,E.children=[],a=[],l.require=b})),s.hmrC={},s.hmrI={}})(),(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),n=(e,t,n,r)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=a=>{if(o.onerror=o.onload=null,"load"===a.type)n();else{var i=a&&("load"===a.type?"missing":a.type),c=a&&a.target&&a.target.href||t,d=new Error("Loading CSS chunk "+e+" failed.\n("+c+")");d.code="CSS_CHUNK_LOAD_FAILED",d.type=i,d.request=c,o.parentNode.removeChild(o),r(d)}},o.href=t,document.head.appendChild(o),o},r=(e,t)=>{for(var n=document.getElementsByTagName("link"),r=0;r<n.length;r++){var o=(i=n[r]).getAttribute("data-href")||i.getAttribute("href");if("stylesheet"===i.rel&&(o===e||o===t))return i}var a=document.getElementsByTagName("style");for(r=0;r<a.length;r++){var i;if((o=(i=a[r]).getAttribute("data-href"))===e||o===t)return i}},o=[],a=[],i=e=>({dispose:()=>{for(var e=0;e<o.length;e++){var t=o[e];t.parentNode&&t.parentNode.removeChild(t)}o.length=0},apply:()=>{for(var e=0;e<a.length;e++)a[e].rel="stylesheet";a.length=0}}),s.hmrC.miniCss=(e,t,c,d,l,u)=>{l.push(i),e.forEach((e=>{var t=s.miniCssF(e),i=s.p+t,c=r(t,i);c&&d.push(new Promise(((t,r)=>{var d=n(e,i,(()=>{d.as="style",d.rel="preload",t()}),r);o.push(c),a.push(d)})))}))},(()=>{var e,t,n,r,o,a=s.hmrS_jsonp=s.hmrS_jsonp||{792:0},i={};function c(t,n){return e=n,new Promise(((e,n)=>{i[t]=e;var r=s.p+s.hu(t),o=new Error;s.l(r,(e=>{if(i[t]){i[t]=void 0;var r=e&&("load"===e.type?"missing":e.type),a=e&&e.target&&e.target.src;o.message="Loading hot update chunk "+t+" failed.\n("+r+": "+a+")",o.name="ChunkLoadError",o.type=r,o.request=a,n(o)}}))}))}function d(e){function i(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var o=r.pop(),a=o.id,i=o.chain,d=s.c[a];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:a};if(d.hot._main)return{type:"unaccepted",chain:i,moduleId:a};for(var l=0;l<d.parents.length;l++){var u=d.parents[l],p=s.c[u];if(p){if(p.hot._declinedDependencies[a])return{type:"declined",chain:i.concat([u]),moduleId:a,parentId:u};-1===t.indexOf(u)&&(p.hot._acceptedDependencies[a]?(n[u]||(n[u]=[]),c(n[u],[a])):(delete n[u],t.push(u),r.push({chain:i.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}s.f&&delete s.f.jsonpHmr,t=void 0;var d={},l=[],u={},p=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var h in n)if(s.o(n,h)){var f,m=n[h],v=!1,y=!1,g=!1,E="";switch((f=m?i(h):{type:"disposed",moduleId:h}).chain&&(E="\nUpdate propagation: "+f.chain.join(" -> ")),f.type){case"self-declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(v=new Error("Aborted because of self decline: "+f.moduleId+E));break;case"declined":e.onDeclined&&e.onDeclined(f),e.ignoreDeclined||(v=new Error("Aborted because of declined dependency: "+f.moduleId+" in "+f.parentId+E));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(f),e.ignoreUnaccepted||(v=new Error("Aborted because "+h+" is not accepted"+E));break;case"accepted":e.onAccepted&&e.onAccepted(f),y=!0;break;case"disposed":e.onDisposed&&e.onDisposed(f),g=!0;break;default:throw new Error("Unexception type "+f.type)}if(v)return{error:v};if(y)for(h in u[h]=m,c(l,f.outdatedModules),f.outdatedDependencies)s.o(f.outdatedDependencies,h)&&(d[h]||(d[h]=[]),c(d[h],f.outdatedDependencies[h]));g&&(c(l,[f.moduleId]),u[h]=p)}n=void 0;for(var b,w=[],L=0;L<l.length;L++){var _=l[L],x=s.c[_];x&&(x.hot._selfAccepted||x.hot._main)&&u[_]!==p&&!x.hot._selfInvalidated&&w.push({module:_,require:x.hot._requireSelf,errorHandler:x.hot._selfAccepted})}return{dispose:function(){var e;r.forEach((function(e){delete a[e]})),r=void 0;for(var t,n=l.slice();n.length>0;){var o=n.pop(),i=s.c[o];if(i){var c={},u=i.hot._disposeHandlers;for(L=0;L<u.length;L++)u[L].call(null,c);for(s.hmrD[o]=c,i.hot.active=!1,delete s.c[o],delete d[o],L=0;L<i.children.length;L++){var p=s.c[i.children[L]];p&&(e=p.parents.indexOf(o))>=0&&p.parents.splice(e,1)}}}for(var h in d)if(s.o(d,h)&&(i=s.c[h]))for(b=d[h],L=0;L<b.length;L++)t=b[L],(e=i.children.indexOf(t))>=0&&i.children.splice(e,1)},apply:function(t){for(var n in u)s.o(u,n)&&(s.m[n]=u[n]);for(var r=0;r<o.length;r++)o[r](s);for(var a in d)if(s.o(d,a)){var i=s.c[a];if(i){b=d[a];for(var c=[],p=[],h=[],f=0;f<b.length;f++){var m=b[f],v=i.hot._acceptedDependencies[m],y=i.hot._acceptedErrorHandlers[m];if(v){if(-1!==c.indexOf(v))continue;c.push(v),p.push(y),h.push(m)}}for(var g=0;g<c.length;g++)try{c[g].call(null,b)}catch(n){if("function"==typeof p[g])try{p[g](n,{moduleId:a,dependencyId:h[g]})}catch(r){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:a,dependencyId:h[g],error:r,originalError:n}),e.ignoreErrored||(t(r),t(n))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:a,dependencyId:h[g],error:n}),e.ignoreErrored||t(n)}}}for(var E=0;E<w.length;E++){var L=w[E],_=L.module;try{L.require(_)}catch(n){if("function"==typeof L.errorHandler)try{L.errorHandler(n,{moduleId:_,module:s.c[_]})}catch(r){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:_,error:r,originalError:n}),e.ignoreErrored||(t(r),t(n))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:_,error:n}),e.ignoreErrored||t(n)}}return l}}}self.webpackHotUpdateajs=(t,r,a)=>{for(var c in r)s.o(r,c)&&(n[c]=r[c],e&&e.push(c));a&&o.push(a),i[t]&&(i[t](),i[t]=void 0)},s.hmrI.jsonp=function(e,t){n||(n={},o=[],r=[],t.push(d)),s.o(n,e)||(n[e]=s.m[e])},s.hmrC.jsonp=function(e,i,l,u,p,h){p.push(d),t={},r=i,n=l.reduce((function(e,t){return e[t]=!1,e}),{}),o=[],e.forEach((function(e){s.o(a,e)&&void 0!==a[e]?(u.push(c(e,h)),t[e]=!0):t[e]=!1})),s.f&&(s.f.jsonpHmr=function(e,n){t&&s.o(t,e)&&!t[e]&&(n.push(c(e)),t[e]=!0)})},s.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(s.p+s.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),s(668)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,